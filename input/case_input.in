[Case]
 title = decay_burg_turb_cFD_test   
 title_mode = 0 # 0: default for testing, 1: use above strict title
 num_elements = 1023
 x_begin = 0.0
 x_end = 6.283185307
 uniform_grid = 1
 refinement_level = 0
 N_exact_ploting_pts = 100

[Simulation]
 unsteady_data_print_flag = 0   # 0: use iter , 1: use time
 unsteady_data_print_iter  = 5000  # iter no. for print of unsteady data 
 unsteady_data_print_time  = 0.100  # time point for print of unsteady data
 convergence_tolerance = 1e-16
 divergence_threshold = 20
 restart_flag = 0   # 0: no restart, 1: restart from restart file
 restart_iter = 158e6
 mode =  dt_const  # normal/test/error_analysis_dt/error_analysis_CFL/CFL_const/dt_const
 case_no = 00

[wave]
 wave_speed = 1;
 wave_form = 3 ;      # 0: sine wave, 1: Gaussian wave, 2: InViscid Burgers 3: Decaying Turbulence

  [./trigonometric]    # u(x,0) = A * sin ( f * PI + phy ) + C
     wave_frequency = 2.0       # wave_frequnecy f
     wave_amplitude = 1.0  # wave amplitude A
     wave_const = 0.0       # C
     wave_freq_shift = 0.0   # phy
     
 [../Gaussian]
   Gaussian_exponent = 38.6  # u(x) = A * exp(-38.6 *x^2)
   Gaussian_amplitude = 1.0 
     
 [../Burger_turb]
   turb_prob_type = Decay_turb_omerSan   # Decay_turb_Adams, Decay_turb_Yanan, forced_turb_Sherwin
   max_wave_no = 2048 
   ko = 10
   spectrum_restart_flag = 1  # 0: compute new spectrum, 1: load spectrum     
   velocity_mean = 0.0  #  u(x) = sum(E(k) *cos(k))+ u_mean

[space_solver]
  eqn_set = Advection  # Advection / Diffusion / Advection_Diffusion
  eqn_type = linear_advec # inv_burger / linear_advec / linear_diffus
  scheme_type = implicit # explicit(classical)/implicit(compact)/DRP4s7/BB4s9/BB4s11/BB4s13/Rem2s7/Rem2s9
  order = 6              
  filter_type = standard  # pade(compact) / BogeyBailly(explicit) / standard(explicit)
  filter_order = 8
  filter_activate_flag = 0
  filter_alpha = 0.1
  filter_stencil_size = 9
  
  [./advec_eqn]
   upwind_biased = 1  # 1: for 3rd order scheme with upwind biased flux. If '0' then it is a fully upwind scheme

  [../heat_eqn]
   thermal_diffusivity = 2e-4

[time_solver]
 calculate_dt_flag = 0  # 0: specify dt and calc CFL, 1: specify CFL and calc dt
 calc_dt_adv_diffus_flag = 0 # 0: based on advection, 1: based on diffusion, 2: based on combined advection-diffusion
 CFL_no = 0.6310
 dt = 1.00e-5
 initial_time = 0
 final_time = 0.200
 no_of_periods = 2.0 #  period = (xf-x0) / wave_speed
 maximum_iteration = 100
 
 end_of_simulation_flag = 1
# 0: use no. of periods to calc final time and then use final time,
# 1: use final time directly and then calculate no of periods,
# 2:  use max_iteration as a stopping criteria if not converged or diverged

 time_solver_type = explicit # explicit/implicit
 time_scheme_type = upwind_leapfrog #leapfrog/upwind_leapfrog/RungeKutta for explicit solver 
 
 [./explicit]
   RK_order = 3
 [../implicit]
